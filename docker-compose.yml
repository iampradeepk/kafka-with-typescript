version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      JVMFLAGS: "-Djute.maxbuffer=4194304"

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 30s

  app:  # Producer
    build:
      context: ./producer
      dockerfile: Dockerfile
    volumes:
      - ./producer:/usr/src/app
      - producer_dist:/usr/src/app/dist  # Preserve compiled files
      - producer_node_modules:/usr/src/app/node_modules  # Preserve installed dependencies
    depends_on:
      kafka:
        condition: service_healthy
    command: npm run start:producer
    ports:
      - "3000:3000"

  cron-consumer:
    build:
      context: ./cron-consumer
      dockerfile: Dockerfile
    volumes:
      - ./cron-consumer:/usr/src/app
      - cron_consumer_dist:/usr/src/app/dist  # Persistent dist folder
      - cron_consumer_node_modules:/usr/src/app/node_modules  # Keep dependencies separate
    depends_on:
      kafka:
        condition: service_healthy
    command: npm start

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    volumes:
      - ./consumer:/usr/src/app
      - consumer_dist:/usr/src/app/dist  # Persistent dist folder
      - consumer_node_modules:/usr/src/app/node_modules  # Keep dependencies separate
    depends_on:
      kafka:
        condition: service_healthy
    command: npm run start:consumer

volumes:
  producer_dist:  # For producer
  producer_node_modules:
  consumer_dist:  # For consumer
  consumer_node_modules:
  cron_consumer_dist:  # For cron-consumer
  cron_consumer_node_modules:
